# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PDFFileMerger.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSlot
from PyPDF4 import PdfFileMerger
from PIL import Image
from docx2pdf import convert
import os

class Ui_Dialog(QObject):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 361)
        
        layout = QtWidgets.QVBoxLayout(Dialog)
        
        #Title Label
        self.title_label = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")  # Use a Windows 10 font
        font.setPointSize(32)
        font.setBold(True)
        self.title_label.setFont(font)
        self.title_label.setAlignment(QtCore.Qt.AlignCenter)  # Align center horizontally
        self.title_label.setObjectName("title_label")
        layout.addWidget(self.title_label, alignment=QtCore.Qt.AlignTop)
        
        #PDF List
        self.file_list_widget = ListDragWidget(Dialog)
        self.file_list_widget.setGeometry(QtCore.QRect(20, 80, 250, 192))
        self.file_list_widget.setObjectName("file_list_widget")
        
        #Legend Label
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(50, 280, 201, 16))
        self.label.setObjectName("label")

        #Browse Button
        self.browse_button = QtWidgets.QPushButton(Dialog)
        self.browse_button.setGeometry(QtCore.QRect(290, 80, 100, 23))
        self.browse_button.setObjectName("browse_button")
        
        #Remove Button
        self.remove_button = QtWidgets.QPushButton(Dialog)
        self.remove_button.setGeometry(QtCore.QRect(290, 110, 100, 23))
        self.remove_button.setObjectName("remove_button")
        
        #Clear Button   
        self.clear_button = QtWidgets.QPushButton(Dialog)
        self.clear_button.setGeometry(QtCore.QRect(290, 140, 100, 23))
        self.clear_button.setObjectName("clear_button")
        
        #Merge Button
        self.merge_button = QtWidgets.QPushButton(Dialog)
        self.merge_button.setGeometry(QtCore.QRect(290, 320, 100, 23))
        self.merge_button.setObjectName("merge_button")
        
   
        self.retranslateUi(Dialog)
        self.merge_button.clicked.connect(self.mergeDocSlot) # type: ignore
        self.remove_button.clicked.connect(self.removePdfFile)
        self.clear_button.clicked.connect(self.clearpdfs)
        self.browse_button.clicked.connect(self.browsefiles)    
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    
      # Apply stylesheet
        self.apply_windows_style(Dialog)

    def apply_windows_style(self, widget):
        windows_stylesheet = """
            QWidget {
                background-color: #F0F0F0; /* Light gray background */
            }
            QLabel {
                color: #000000; /* Black text */
            }
            QPushButton {
                background-color: #0078D4; /* Windows blue button color */
                color: #FFFFFF; /* White text */
                border: none;
                border-radius: 5px;
                padding: 7px 12px;
            }
            QPushButton:hover {
                background-color: #005A9E; /* Darker blue on hover */
            }
            QListWidget {
                background-color: #FFFFFF;
                border: 1px solid #BDBDBD; /* Light gray border */
                selection-background-color: #0078D4;
                color: #000000;
            }
            """
        widget.setStyleSheet(windows_stylesheet)
    
    @pyqtSlot()
    def mergeDocSlot(self):
        output_file_name = ''  # default name for file output

        if self.file_list_widget.count() > 1:  # no merging unless there are enough documents to merge

            options = QtWidgets.QFileDialog.Options()
            options |= QtWidgets.QFileDialog.DontUseNativeDialog
            output_file_name, _ = QtWidgets.QFileDialog.getSaveFileName(
                None, "Save File", "", "PDF File (*.pdf)", options=options)

            for i in range(self.file_list_widget.count()):
                if output_file_name + ".pdf" == self.file_list_widget.item(i).text():
                    error_message = QtWidgets.QMessageBox.critical(None, "Error!",
                                                                "Error! Your file name is already in use!")
                    return

            if output_file_name:  # check to make sure there is a name
                # user's file name won't include .pdf unless they type it in
                output_file_name = output_file_name + '.pdf'

                # create PDF merger object
                pdf_merger = PdfFileMerger(open(output_file_name, "wb"))

                for i in range(self.file_list_widget.count()):
                    # get everything from the file list
                    pdf_merger.append(self.file_list_widget.item(i).text())

                pdf_merger.write(output_file_name)
                pdf_merger.close()

                success_message = QtWidgets.QMessageBox.information(
                    None, "Files Merged", f"{output_file_name} has been successfully written!")

    def removePdfFile(self):
        selected_item = self.file_list_widget.currentItem()
        if selected_item is not None:
            row = self.file_list_widget.row(selected_item)
            self.file_list_widget.takeItem(row)
    
    def clearpdfs(self):
        if self.file_list_widget.count() > 0:
            self.file_list_widget.clear()
        else:
            error_message = QtWidgets.QMessageBox.critical(None, "Error!",
                                                           "Error! There are no files to clear!")
            return
    
    def browsefiles(self):
        files, _ = QtWidgets.QFileDialog.getOpenFileNames(
            None, "Open File", "", "Authorized Files (*.pdf *.docx *.jpg *.png *.jpeg))")
        for file in files:
           if file.endswith('.pdf'): 
                pdf_path = file
                pdf_name = os.path.splitext(os.path.basename(pdf_path))[0] + '.pdf'
                self.file_list_widget.addItem(pdf_name)
           elif file.endswith(('.jpg', '.png', '.jpeg')):
                img_pdf = Image.open(file).convert('RGB') 
                pdf_path = os.path.splitext(os.path.basename(file))[0] + '.pdf'
                img_pdf.save(pdf_path)
                self.file_list_widget.addItem(pdf_path)
           elif file.endswith(('.docx', '.doc')):
                doc_path = file
                pdf_path = os.path.splitext(os.path.basename(doc_path))[0] + '.pdf'
                convert(doc_path, pdf_path)
                self.file_list_widget.addItem(pdf_path)
            
                
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "PDF Merger"))
        self.title_label.setText(_translate("Dialog", "PDF File Merger"))
        self.merge_button.setText(_translate("Dialog", "Merge Files"))
        self.remove_button.setText(_translate("Dialog", "Remove File"))
        self.clear_button.setText(_translate("Dialog", "Clear Files"))
        self.browse_button.setText(_translate("Dialog", "Browse Files"))
        self.label.setText(_translate("Dialog", "Drag and drop files into the box above"))

class ListDragWidget(QtWidgets.QListWidget):
    """Creates a list widget that allows user to drag and drop PDF
    files into the widget area to add these files."""
    def __init__(self, parent):
        super(ListDragWidget, self).__init__(parent)
        self.setAcceptDrops(True)
        self.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()
        else:
            super(ListDragWidget, self).dragEnterEvent(event)

    def dragMoveEvent(self, event):
        super(ListDragWidget, self).dragMoveEvent(event)

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            for file in event.mimeData().urls():
                file_path = file.toLocalFile()
                if file_path.endswith('.pdf'):
                    pdf_name = os.path.splitext(os.path.basename(file_path))[0] + '.pdf'
                    self.addItem(pdf_name)
                elif file_path.endswith(('.jpg', '.png', '.jpeg')):
                    img_pdf = Image.open(file_path).convert('RGB') 
                    pdf_path = os.path.splitext(os.path.basename(file_path))[0] + '.pdf'
                    img_pdf.save(pdf_path)
                    self.addItem(pdf_path)
                elif file_path.endswith(('.docx', '.doc')):
                    doc_path = file_path
                    pdf_path = os.path.splitext(os.path.basename(doc_path))[0] + '.pdf'
                    convert(doc_path, pdf_path)
                    self.addItem(pdf_path)
        else:
            super(ListDragWidget, self).dropEvent(event)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
